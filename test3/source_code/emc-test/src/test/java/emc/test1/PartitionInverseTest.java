package emc.test1;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;


/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'zhesu' at '17-3-2 下午12:36' with Gradle 3.0
 *
 * @author zhesu, @date 17-3-2 下午12:36
 */
public class PartitionInverseTest {
   
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}
	
	@Test
	public void test01partitionInverse() {
		System.out.println("=============test01partitionInverse=================");
		
		PartitionInverse inverse = new PartitionInverse();
    	Node eightNodesHead = new Node(1);
    	Node eightNodes2 = new Node(2);
    	Node eightNodes3 = new Node(3);
    	Node eightNodes4 = new Node(4);
    	Node eightNodes5 = new Node(5);
    	Node eightNodes6 = new Node(6);
    	Node eightNodes7 = new Node(7);
    	Node eightNodes8 = new Node(8);
    	eightNodesHead.setNext(eightNodes2);
    	eightNodes2.setNext(eightNodes3);
    	eightNodes3.setNext(eightNodes4);
    	eightNodes4.setNext(eightNodes5);
    	eightNodes5.setNext(eightNodes6);
    	eightNodes6.setNext(eightNodes7);
    	eightNodes7.setNext(eightNodes8);
    	
    	System.out.println("The original link is: ");
    	inverse.printALink(eightNodesHead);
    	
    	// for k = 1
    	Node invserseEveryOne = inverse.inverseALink(eightNodesHead, 1);
    	System.out.println("For k = 1: ");
    	inverse.printALink(invserseEveryOne);
    	
    	// for k = 3
    	Node invserseEveryThree = inverse.inverseALink(eightNodesHead, 3);
    	System.out.println("For k = 3: ");
    	inverse.printALink(invserseEveryThree);
		
	}
	
	
}
